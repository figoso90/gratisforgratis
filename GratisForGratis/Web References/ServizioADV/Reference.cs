//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Il codice sorgente è stato generato automaticamente da Microsoft.VSDesigner, versione 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace GratisForGratis.ServizioADV {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServizioWebControllerBinding", Namespace="urn:ServizioWebControllerwsdl")]
    public partial class ServizioWebControllerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getBannerOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBannerRandomOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBannerByTokenOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ServizioWebControllerService() {
            this.Url = global::GratisForGratis.Properties.Settings.Default.GratisForGratis_ServizioADV_ServizioWebControllerService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getBannerCompletedEventHandler getBannerCompleted;
        
        /// <remarks/>
        public event getBannerRandomCompletedEventHandler getBannerRandomCompleted;
        
        /// <remarks/>
        public event getBannerByTokenCompletedEventHandler getBannerByTokenCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ServizioWebControllerwsdl#getBanner", RequestNamespace="urn:ServizioWebControllerwsdl", ResponseNamespace="urn:ServizioWebControllerwsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string getBanner(string token, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string tipo) {
            object[] results = this.Invoke("getBanner", new object[] {
                        token,
                        tipo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getBannerAsync(string token, string tipo) {
            this.getBannerAsync(token, tipo, null);
        }
        
        /// <remarks/>
        public void getBannerAsync(string token, string tipo, object userState) {
            if ((this.getBannerOperationCompleted == null)) {
                this.getBannerOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBannerOperationCompleted);
            }
            this.InvokeAsync("getBanner", new object[] {
                        token,
                        tipo}, this.getBannerOperationCompleted, userState);
        }
        
        private void OngetBannerOperationCompleted(object arg) {
            if ((this.getBannerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBannerCompleted(this, new getBannerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ServizioWebControllerwsdl#getBannerRandom", RequestNamespace="urn:ServizioWebControllerwsdl", ResponseNamespace="urn:ServizioWebControllerwsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string getBannerRandom(string token, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string tipo) {
            object[] results = this.Invoke("getBannerRandom", new object[] {
                        token,
                        tipo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getBannerRandomAsync(string token, string tipo) {
            this.getBannerRandomAsync(token, tipo, null);
        }
        
        /// <remarks/>
        public void getBannerRandomAsync(string token, string tipo, object userState) {
            if ((this.getBannerRandomOperationCompleted == null)) {
                this.getBannerRandomOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBannerRandomOperationCompleted);
            }
            this.InvokeAsync("getBannerRandom", new object[] {
                        token,
                        tipo}, this.getBannerRandomOperationCompleted, userState);
        }
        
        private void OngetBannerRandomOperationCompleted(object arg) {
            if ((this.getBannerRandomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBannerRandomCompleted(this, new getBannerRandomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ServizioWebControllerwsdl#getBannerByToken", RequestNamespace="urn:ServizioWebControllerwsdl", ResponseNamespace="urn:ServizioWebControllerwsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string getBannerByToken(string token, string pubblicita, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string tipo) {
            object[] results = this.Invoke("getBannerByToken", new object[] {
                        token,
                        pubblicita,
                        tipo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getBannerByTokenAsync(string token, string pubblicita, string tipo) {
            this.getBannerByTokenAsync(token, pubblicita, tipo, null);
        }
        
        /// <remarks/>
        public void getBannerByTokenAsync(string token, string pubblicita, string tipo, object userState) {
            if ((this.getBannerByTokenOperationCompleted == null)) {
                this.getBannerByTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBannerByTokenOperationCompleted);
            }
            this.InvokeAsync("getBannerByToken", new object[] {
                        token,
                        pubblicita,
                        tipo}, this.getBannerByTokenOperationCompleted, userState);
        }
        
        private void OngetBannerByTokenOperationCompleted(object arg) {
            if ((this.getBannerByTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBannerByTokenCompleted(this, new getBannerByTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void getBannerCompletedEventHandler(object sender, getBannerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBannerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBannerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void getBannerRandomCompletedEventHandler(object sender, getBannerRandomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBannerRandomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBannerRandomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void getBannerByTokenCompletedEventHandler(object sender, getBannerByTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBannerByTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBannerByTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591