@using GratisForGratis.Models
@model OggettoViewModel
@section Styles {
    @Styles.Render("~/Scripts/jgallery/css/font-awesome.min.css")
    @Styles.Render("~/Scripts/jgallery/css/jgallery.min.css?v=1.5.5")
    @Styles.Render("~/Content/oggetto.css")
}
<section id="page">
    <section id="acquisto" class="content">
        @using (Html.BeginForm("Acquista", "Oggetto", FormMethod.Post, new { @class = "object", role = "form" }))
        {
            if (TempData["azione"] as string != "View")
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.Token)
            }
            <div class="left">
                <div class="album">
                    @foreach (string foto in Model.Foto)
                    {
                        <a href="@Url.Content("~/Uploads/Images/" + Model.VenditoreToken + "/" + @Model.DataInserimento.Value.Year + "/Normal/" + foto)">
                            <img src="@Url.Content("~/Uploads/Images/" + Model.VenditoreToken + "/" + @Model.DataInserimento.Value.Year + "/Little/" + foto)" alt="@Model.Nome" />
                        </a>
                    }
                </div>
                <div class="feedback" title="@Language.FeedbackUser">
                    @(Model.VenditoreFeedback > -1 ? string.Format(Language.FeedbackMessage, Model.VenditoreFeedback) : Language.FeedbackNothing)
                </div>
            </div>
            <div class="right">
                <h3 class="title">@Model.Nome</h3>
                <div class="info">
                    <h5 class="category"><b>@Language.Category :</b> @string.Join(" ", Model.Categoria.ToArray())</h5>
                    <h5 class="brand"><b>@Language.Brand :</b> @Model.Marca</h5>
                    <h5 class="state"><b>@Language.StateObject :</b> @Model.StatoOggetto</h5>
                    <h5 class="points"><b>@Language.Moneta :</b> @Model.Punti = € @Model.Soldi</h5>
                    @if(Model.Anno!=null){<h5 class="years"><b>@Language.Year :</b> @Model.Anno</h5>}
                    <h5 class="place"><b>@Language.Place :</b> @Model.Citta</h5>
                    @if (!string.IsNullOrWhiteSpace(Model.Note)){<h5 class="note"><b>@Language.Note :</b> @Model.Note</h5>}
                    @if (TempData["azione"] as string != "View" && Model.Offerta != null && Request.IsAuthenticated && Model.VenditoreID != ((PersonaModel)Session["utente"]).Persona.ID)
                    {
                        if (Model.TipoPagamento != GratisForGratis.Models.TipoPagamento.Vendita)
                        {
                            // Oggetto venduto per baratto
                            <h5 class="typeBid">
                                @Language.TypeBid : @Html.EnumDropDownListFor(m => m.Offerta.TipoOfferta, new { @class = "form-control" })
                            </h5>
                            <h5 class="offerPoints">@Language.OfferPoints : @Html.TextBoxFor(m => m.Offerta.PuntiOfferti, "0", new { @class = "form-control number" })</h5>
                            <h5 class="barters">
                                @Html.Label(Resources.Language.ExchangeObject) : @Html.TextBox("CercaOggetto", "", new { @class = "form-control", data_url = "/Cerca/FindOggettiBarattabili", data_value_id = "OggettiBarattati" })
                                @if (Model.Offerta.OggettiBarattati != null && Model.Offerta.OggettiBarattati.Length > 0)
                                {
                                    @Html.HiddenFor(m => m.Offerta.OggettiBarattati)
                                }
                                @Html.ValidationMessageFor(m => m.Offerta.OggettiBarattati, "", new { @class = "text-danger" })
                            </h5>
                            <div id="previewBarter">

                            </div>
                        }
                        else
                        {
                            // Oggetto venduto per punti e basta (da settare il tipo vendita)
                            @Html.HiddenFor(m => m.Offerta.TipoOfferta)
                        }
                    }
                </div>
                <div class="buttons">
                    @if (TempData["azione"] as string != "View" && Request.IsAuthenticated && Model.VenditoreID != ((PersonaModel)Session["utente"]).Persona.ID)
                    {
                        if (Model.StatoVendita == StatoVendita.INATTIVO)
                        {
                            // pulsante per suggerire di attivare l'annuncio
                            <a href="javascript:void(0);" onclick="suggerisciAttivazioneAnnuncio(@Model.VenditaID);">@Language.SuggestAdActivation</a>
                        }
                        <input name="Compra" type="submit" class="btn buy" value="@Language.BuyNow" />
                    }
                    else if (!Request.IsAuthenticated)
                    {
                        @Html.ActionLink(Language.LoginAndBuy, "Login", "Utente", new { ReturnUrl = "~/Oggetto/Acquista?nome=" + HttpUtility.UrlEncode(Model.Nome) + "&token=" + HttpUtility.UrlEncode(Model.Token) }, new { @class = "btn buy" })
                    }
                </div>
                <h4>
                    @Html.ValidationMessage("ErroreOfferta", new { @class = "text-danger" })
                </h4>
            </div>
        }
    </section>
</section>

@section Scripts {
    @Scripts.Render("~/Scripts/jgallery/js/jgallery.min.js?v=1.5.5")
    @Scripts.Render("~/Scripts/oggetto.js")
    @Scripts.Render("~/Scripts/baratto.js")
}