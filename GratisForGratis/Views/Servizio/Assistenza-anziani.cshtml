@using GratisForGratis.Models
@model ServizioViewModel
@section Styles {
    @Styles.Render("~/Scripts/jgallery/css/font-awesome.min.css")
    @Styles.Render("~/Scripts/jgallery/css/jgallery.min.css?v=1.5.5")
    @Styles.Render("~/Content/oggetto.css")
}
<section id="page">
    <section id="acquisto" class="content">
        @using (Html.BeginForm("Acquista", "Servizio", FormMethod.Post, new { @class = "object", role = "form" }))
        {
            if (TempData["azione"] as string != "View")
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.Token)
            }
            <div class="left">
                <div class="album">
                    @foreach (string foto in Model.Foto)
                    {
                        <a href="@Url.Content("~/Uploads/Images/" + Model.VenditoreToken + "/" + @Model.DataInserimento.Value.Year + "/Normal/" + foto)">
                            <img src="@Url.Content("~/Uploads/Images/" + Model.VenditoreToken + "/" + @Model.DataInserimento.Value.Year + "/Little/" + foto)" alt="@Model.Nome" />
                        </a>
                    }
                </div>
                <div class="feedback" title="@Language.FeedbackUser">
                    @(Model.VenditoreFeedback > -1 ? string.Format(Language.FeedbackMessage, Model.VenditoreFeedback) : Language.FeedbackNothing)
                </div>
            </div>
            <div class="right">
                <h3 class="title">@Model.Nome</h3>
                <div class="info">
                    <h5 class="category"><b>@Language.Category :</b> @Model.Categoria</h5>
                    <h5 class="rate"><b>@Language.Rate :</b> @Model.Tariffa</h5>
                    <h5 class="points"><b>@Language.Points :</b> @Model.Punti => € @Model.Soldi</h5>
                    <h5 class="place"><b>@Language.Place :</b> @Model.Citta</h5>
                    <h5 class="days">
                        <b>@Language.Days :</b>
                        @if (Model.Tutti)
                        {
                            @Language.AllDays
                        }
                        else
                        {
                            if (Model.Lunedi)
                            {
                                @Language.Monday <br />
                            }
                            if (Model.Martedi)
                            {
                                @Language.Tuesday <br />
                            }
                            if (Model.Mercoledi)
                            {
                                @Language.Wednesday <br />
                            }
                            if (Model.Giovedi)
                            {
                                @Language.Thursday <br />
                            }
                            if (Model.Venerdi)
                            {
                                @Language.Friday <br />
                            }
                            if (Model.Sabato)
                            {
                                @Language.Saturday <br />
                            }
                            if (Model.Domenica)
                            {
                                @Language.Sunday <br />
                            }
                        }
                    </h5>
                    <h5 class="businesshour"><b>@Language.BusinessHour :</b> @Language.StartTime @Model.OraInizio @Language.EndTime @Model.OraFine</h5>
                    @if (Model.OraInizioFestivita != null && Model.OraFineFestivita != null)
                    {
                        <h5 class="holidays"><b>@Language.Holidays :</b> @Language.StartTime @Model.OraInizioFestivita @Language.EndTime @Model.OraFineFestivita</h5>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.ServiziOfferti)){<h5 class="servicesbid"><b>@Language.Bid :</b> @Model.ServiziOfferti</h5>}
                    @if (!string.IsNullOrWhiteSpace(Model.RisultatiFinali)){<h5 class="results"><b>@Language.Results :</b> @Model.RisultatiFinali</h5>}
                    @if (!string.IsNullOrWhiteSpace(Model.Note)){<h5 class="note"><b>@Language.Note :</b> @Model.Note</h5>}
                    @if (TempData["azione"] as string != "View" && Model.Offerta != null && Request.IsAuthenticated && Model.VenditoreID != ((PersonaModel)Session["utente"]).Persona.ID)
                    {
                        if (Model.TipoPagamento != TipoPagamento.Vendita)
                        {
                            if (Model.TipoPagamento == TipoPagamento.Qualunque)
                            {
                            <h5 class="typeBid">
                                @Language.TypeBid : @Html.EnumDropDownListFor(m => m.Offerta.TipoOfferta, new { @class = "form-control" })
                            </h5>
                            }
                            <div id="boxBarter" class="@((Model.TipoPagamento == TipoPagamento.Baratto)?"barter":"noBarter")">
                                <h5 class="offerPoints">@Language.OfferPoints : @Html.TextBoxFor(m => m.Offerta.PuntiOfferti, "0", new { @class = "form-control number" })</h5>
                                <h5 class="barters">
                                    @Html.Label(Resources.Language.ExchangeObject) : @Html.TextBox("CercaServizio", "", new { @class = "form-control", data_url = "/Cerca/FindServiziDaBarattare", data_value_id = "ServiziBarattati" })
                                    @if (Model.Offerta.ServiziBarattati != null && Model.Offerta.ServiziBarattati.Length > 0)
                                    {
                                        @Html.HiddenFor(m => m.Offerta.ServiziBarattati)
                                    }
                                    @Html.ValidationMessageFor(m => m.Offerta.ServiziBarattati, "", new { @class = "text-danger" })
                                </h5>
                                <div id="previewBarter">

                                </div>
                            </div>
                        }
                        else
                        {
                            // Oggetto venduto per punti e basta (da settare il tipo vendita)
                            @Html.HiddenFor(m => m.Offerta.TipoOfferta)
                        }
                    }
                </div>
                <div class="buttons">
                    @if (TempData["azione"] as string != "View" && Request.IsAuthenticated && Model.VenditoreID != ((PersonaModel)Session["utente"]).Persona.ID)
                    {
                        <input name="Compra" type="submit" class="btn buy" value="@Language.BuyNow" />
                    }
                    else if (!Request.IsAuthenticated)
                    {
                        @Html.ActionLink(Language.LoginAndBuy, "Login", "Utente", new { ReturnUrl = "~/Servizio/Acquista?nome=" + HttpUtility.UrlEncode(Model.Nome) + "&token=" + HttpUtility.UrlEncode(Model.Token) }, new { @class = "btn buy" })
                    }
                </div>
                <h4>
                    @Html.ValidationMessage("ErroreOfferta", new { @class = "text-danger" })
                </h4>
            </div>
        }
    </section>
</section>
@section Scripts {
    @Scripts.Render("~/Scripts/jgallery/js/jgallery.min.js?v=1.5.5")
    @Scripts.Render("~/Scripts/oggetto.js")
    @Scripts.Render("~/Scripts/baratto.js")
}